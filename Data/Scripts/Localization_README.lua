--[[
	Localization Kit
	v1.0
	by: standardcombo
	
	With the Localization Kit players are able to choose the language they
	prefer to play in and the game adapts all texts to match that choice.
	Supports a flexible number of languages of your choosing and includes tools
	that solve many of the workflow challenges associated with the process of
	translating a Core game.
	
	Core has a global player base. Localization is a high return, low cost
	investment to your game that increases player retention and engagement.
	While English is a commonly known language, most players worldwide prefer
	to play in their local language and many don't know a foreign language
	at all.
	
	This package is open source and available at:
	https://github.com/ManticoreGamesInc/LocalizationCC
	
	
	Setup
	=====
	
	1. For an existing game, use the `Locale Text Scanner` to extract the
	   game's texts into a spreadsheet. See instructions below.
	2. Use the external `Loc Import Tool` to import game texts from a
	   spreadsheet. See instructions below.
	3. Add a copy of the `Locale Manager` template to the hierarchy.
	4. Add a copy of `Language Selection Popup` to the hierarchy.
	
	
	Locale Text Scanner
	===================
	
	This is a tool designed to help extract texts from a game that is already
	developed and prep them for translation. Follow these steps:
	
	1. Add a copy of the `Locale Text Scanner` template into the hierarchy.
	2. Run your game in preview (single player or multiplayer).
	3. Act out normal gameplay actions to explore the different content in the
	   game. While you are doing those actions, the Scanner is saving all texts
	   that appear in UI or in 3D.
	4. Spend at least 1 second on each piece of content. The key here is for
	   UI that is dynamically set to explore all content. If there is static UI
	   that is always in the hierarchy, the Scanner will gather from those
	   without the need to "look" at them.
	   E.g. If your game has a shop or collection system, look through all
	   possible items.
	3. When you are ready, press LShift + T to dump all the game's texts into
	   the Event Log.
	4. Go to the Event Log view.
	5. Take note of the number of texts generated by the Scanner.
	6. Select all the lines of text that begin with "tid_" and are followed by
	   the game text.
	7. Copy the texts (Ctrl + C).
	8. Continue with the "Spreadsheet" instructions below...
	
	
	The Spreadsheet
	===============
	
	An external spreadsheet program is used during the translation step of the
	process in order to convert all texts to all languages. This setup uses
	Google Sheets, but another spreadsheet, such as Excel, can also work.
	
	1. Navigate to:
	   https://docs.google.com/spreadsheets/d/1oDcC5-Mm4yIFmmWd38CdOqQpX8kZCKgZqRUZdkQ-P5o
	2. File > Make a Copy
	3. Name your spreadsheet according to your game.
	4. If using the `Locale Text Scanner`:
	   a) Scroll to the bottom, where it says "Add [1000] more rows".
	   b) Enter the amount for how many texts were generated by the Scanner.
	   c) Select the first blank cell that was added.
	   d) Paste the texts copied over from the Scanner. If done correctly, the
	      "TIDs" and "enUS" columns should be filled up with your game's texts.
	   e) Look for texts that are very similar and procedurally generated.
	      E.g. If your game has a health bar, you may see many variations of
	      "Health 95/100". Texts such as these are dynamic and imply they should
	      have parameters. See the "Dynamic Texts" section below.
	5. Add and remove texts as needed.
	6. The spreadsheet comes with a row that says "tid_hello_world". This row
	   demonstrates how to use the Google Translate formula to translate texts.
	7. If possible, send the spreadsheet to be professionally translated.
	   
	
	Loc Import Tool
	===============
	
	This is a tool external to Core. Its purpose is to import the texts, from
	the spreadsheet, back into your game. It works by taking the contents of
	your spreadsheet as	input and auto-generating Lua files-- one per language.
	
	As the library of texts is auto-generated it's not recommended to edit those
	Lua files after they are generated. To make changes to game texts, instead
	edit the spreadsheet and re-import it.
	
	The Import tool is also open source and part of the same git location as
	this localization package.
	
	Setup:
	
	1. Download the tool from:
	   standardcombo.com/Loc_import_tool.zip
	2. Extract the .zip
	3. Run the executable `Loc Import Tool.exe`. Depending on your anti-virus
	   software it may be necessary to add an exception.
	   
	Importing:
	
	<TODO>
	
	
	Locale Manager (template)
	==============
	
	<TODO>
	
	
	Language Selection Popup (template)
	========================
	
	<TODO>
	
	
	Dynamic Texts
	=============
	
	<TODO>
	
	
	
	Testing & Bugfixing
	===================
	
	It's important to test your game in the different languages to see if
	everything appears ok.
	
	Common localization issues:
	
	1. Sometimes special alphabets, such as Cyrillic, can be missing some of
	   the glyphs in one of the fonts. If that happens, report the issue to
	   Manticore and try to find an alternative translation that works. If
	   needed, you can disable the translation of a text in a specific
	   language by  prefixing that text in the spreadsheet with "<disable>".
	   
	2. Some texts may not have been captured with the `Locale Text Scanner`.
	   It's not important to run the scanner for all text, as new texts or
	   texts that were missed can be entered manually into the spreadsheet.
	   
	3. Texts in some languages may not fit into the UI layout. In those cases,
	   you can specify a glyph limit in the spreadsheet's second column and
	   ask the translators to see if they can come up with shorter versions.
	   In some cases it may be better to modify the UI elements to behave in
	   a more dynamic fashion, in a way that is flexible to the content size.
	
	
	Adding a Language
	=================
	
	Let's say your game is fully translated and working. At some point you
	may want to add another language. Here's how:
	
	1. In the spreadsheet, add a column to the right-most side.
	2. Change the header to set the locale key for the new language.
	3. Send the file to a translator or use the Google Translate formula to
	   fill up the rows for each text.
	4. Import the texts using the `Loc Import Tool` (see above).
	5. Edit the Language Selection Popup to include the new language choice:
	   a) Enable visibility on the panel so you can see it during edit.
	   b) Duplicate one of the language buttons and adjust the layout.
	   c) Select the new button. In the Properties view, change the `Text`
	      property to say the name of the language. At the bottom, in the
	      Custom properties, modify the LocaleKey to match the header in the
	      spreadsheet.
	   d) Revert visibility on the panel back to its original value.
	6. Open the script `LanguageSelectionClient`.
	7. Look at the function `UpdateTitleAndButton()` to see if it already
	   accounts for the new language. If not, add it to the if-else block.
	
	
	Questions? Problems? Go to the forum post associated with this package:
	<TODO>
	
--]]

